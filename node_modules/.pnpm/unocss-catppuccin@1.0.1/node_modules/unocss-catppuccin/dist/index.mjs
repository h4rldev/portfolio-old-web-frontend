import { flavors, flavorEntries } from '@catppuccin/palette';

const extendTheme = (options = {}) => {
  const { prefix = "ctp", defaultFlavour } = options;
  const extendTheme2 = (theme) => {
    theme["colors"] ??= {};
    const target = prefix ? theme["colors"][prefix] ??= {} : theme["colors"];
    if (defaultFlavour && flavors[defaultFlavour]) {
      for (let [colourName, colour] of flavors[defaultFlavour].colorEntries) {
        if (!prefix && target[colourName]) {
          target["ctp"] ??= {};
          target["ctp"][colourName] = colour.hex;
        } else {
          target[colourName] = colour.hex;
        }
      }
    } else {
      for (let [flavourName, flavour] of flavorEntries) {
        //! We have to create a new variable to prevent
        //! accidentally nesting flavours inside each other
        const newTarget = target[flavourName] ??= {};
        for (let [colourName, colour] of flavour.colorEntries) {
          newTarget[colourName] = colour.hex;
        }
      }
    }
  };
  return extendTheme2;
};

const presetCatppuccin = (options = { mode: "extend" }) => {
  const preset = {
    name: "unocss-catppuccin"
  };
  const { mode, prefix = "ctp", defaultFlavour } = options;
  if (mode === "extend") {
    preset.extendTheme = extendTheme({ prefix, defaultFlavour });
  } else {
    throw new Error(`Unsupported mode provided: \`${mode}\``);
  }
  return preset;
};

export { presetCatppuccin };
